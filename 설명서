[ < * 필독 * > ] 
- 이 설명서에 있는 코드는 예시입니다. 최대한 복사하지 않고 이해하며 스스로 작성할 수 있도록 해보세요.
- 여기 있는 설명서가 이해가 되지 않는다면 무엇이든지 질문 가능합니다! 제발 모르면 질문해주세요.
- 제가 만들고 있는 클릭형 노가다 게임의 요소입니다
    - 메인 버튼 클릭 시 돈 증가
    - n초당 자동으로 돈이 들어오는 일꾼 강화 시스템
    - 메인 버튼 강화로 엔딩까지 이어질 수 있는 스토리
    - 클릭 도구 강화로 버튼 1회 클릭 당 얻을 수 있는 돈 증가 시스템
    - n초마다 1회 클릭 당 얻을 수 있는 돈이 n배가 되는 피버 시스템



[ 1. HTML 틀짜기 ]

먼저 메인 화면과 상점 화면을 나눕시다.
메인 화면에는 현재 돈(클릭횟수) 표시, 메인 버튼, 강화 버튼, 피버 타임 정도가 있으면 될 것 같네요.
메인 버튼을 클릭했을 때 addMoney라는 함수를 실행하고 강화 버튼을 클릭했을 때 upgrade라는 함수를 실행하도록 하겠습니다.
저는 이렇게 했습니다.

    <div class="main">
        <div id="nowMoney">0</div>
        <div class="fever">
            <div id="fever">Fever</div>
            <div id="feverMain">
                <div id="feverMainInner"></div>
            </div>
        </div>
        <div id="btn" onclick="addMoney();">낡은</div>
        <div id="upgrade" onclick="upgrade();">강화</div>
    </div>

그리고 상점 화면에는 일꾼 상점, 업그레이드 상점이 있어야할 것 같은데,
저는 두 상점을 상점 전환 버튼을 통해 어떤 상점을 보여줄지 선택할 수 있도록 하는게 좋을 것 같아요.
상점 전환 버튼을 클릭했을 때 changeShop이라는 함수를 실행하도록 하겠습니다.
그래서 저는 이렇게 했습니다.

    <div class="shop">
        <div id="changeShop" onclick="changeShop();">U</div>
        <div id="workerShop"></div>
        <div id="upgradeShop"></div>
    </div>

이제 일꾼 상점에서 어떤 일꾼들을 구매할 수 있는지 알려주면 좋겠죠?
저는 workerShop이라는 id를 가진 div를 만들었습니다.
나중에 이 div에 JavaScript를 사용해 일꾼들을 넣어주겠습니다.

    <div id="workerShop"></div>

그리고 업그레이드 상점에는 1회 클릭 당 얻을 수 있는 돈(클릭 도구) 업그레이드, 일꾼 돈 자동 지급 시간 업그레이드 , 피버 시간 업그레이드 정도가 있으면 좋겠네요.
저는 upgradeShop이라는 id를 가진 div 속에 이렇게 넣었습니다.
그리고 각 업그레이드를 클릭하면 buyUpgrade 함수를 실행해 업그레이드를 할 수 있도록 하겠습니다.

    <div id="upgradeShop">
        <div class="upgrades" id="upgrade0" onclick="buyUpgrade(0);"></div>
        <div class="upgrades" id="upgrade1" onclick="buyUpgrade(1);"></div>
        <div class="upgrades" id="upgrade2" onclick="buyUpgrade(2);"></div>
    </div>



[ 2. CSS 꾸미기 ]

먼저 메인 화면과 상점 화면의 비율을 조정해줍시다.
일단 두 화면의 position을 모두 절대적이게 만들어주고 메인과 상점의 화면 비율을 정해줍시다.
저는 이렇게 했습니다.

    .main {
        position: absolute;
        height: 100vh;
        width: 70%;
        background-color: white;
    }

    .shop {
        position: absolute;
        height: 100vh;
        width: 30%;
        left: 70%;
        background-color: rgb(219, 219, 219);
    }

배경 색은 자유입니다.

이제 메인 버튼을 꾸며주어야할 것 같네요.
메인 버튼은 원하는대로 꾸며주세요. 뭐 사진을 넣던지 정말 버튼만 넣던지 알아서 원하는 대로 하시면 됩니다.
저는 그냥 간단하게 버튼만 했습니다.

    #btn {
        position: absolute;
        width: 300px;
        height: 300px;
        background-color: rgb(255, 189, 123);
        left: calc(50% - 150px);
        top: calc(50vh - 150px);
        font-size: 50px;
        text-align: center;
        line-height: 300px;
        border-radius: 50%;
    }

크기와 배경 색, 위치, 등은 모두 자유입니다.

또한 버튼을 클릭했을 때 현재 돈이 표시되어야 하겠죠?
저는 이렇게 했습니다.

    #nowMoney {
        position: absolute;
        width: 100%;
        top: 30px;
        text-align: center;
        font-size: 30px;
    }

크기와 위치 등은 모두 자유입니다.

강화 버튼은 메인 버튼 아래에 위치하면 좋을 것 같은데
이건 자유입니다! 맘대로 하셔 좋습니다.
저는 이렇게 했습니다.

    #upgrade {
        position: absolute;
        bottom: 30px;
        left: calc(50% - 150px);
        width: 300px;
        height: 80px;
        background-color: rgb(85, 255, 0);
        text-align: center;
        font-size: 30px;
        line-height: 80px;
    }

위치나 크기, 배경 색 등은 자유입니다.

메인 화면에는 피버타임도 알려줘야겠죠?
저는 피버 타임을 구현하기 위해 게이지가 피버 타임이라는 것을 알려주기 위해 그냥 아무런 의미 없는 상자를 만들었습니다.

    #fever {
        position: absolute;
        width: 100px;
        height: 100px;
        background-color: rgb(192, 255, 184);
        line-height: 100px;
        text-align: center;
        font-size: 30px;
        top: 10px;
        right: 10px;
    }

이 박스는 완전 자유입니다.

또한 피버 게이지를 표시하기 위해 피버 게이지 바와 안에 표시되는 퍼센트 정도를 만들어 줘야겠네요.
저는 이렇게 했습니다.

    #feverMain {
        position: absolute;
        width: 100px;
        height: 10px;
        background-color: rgb(219, 219, 219);
        text-align: center;
        top: 115px;
        right: 10px;
    }

    #feverMain #feverMainInner {
        width: 0;
        height: 100%;
        background-color: lime;
        transition: .1s;
    }


feverMain이라는 바를 만들고 feverMainInner라는 요소를 그 div 안에 넣어 height가 100%이고 width 100%가 되면 feverMain이 모두 꽉찰 수 있도록 합시다.
이 또한 크기와 색깔 등은 자유입니다.

이제 상점 화면으로 넘어갑시다!
상점 화면에서는 일꾼 상점과 업그레이드 상점이 있어야 할 것 같은데
일단 초기에는 일꾼 상점을 먼저 보여주고 업그레이드 상점은 상점 전환 버튼을 클릭했을 때 나오도록 합시다.
그러기 위해서는 일꾼 상점의 display를 block으로 하고 업그레이드 상점의 display는 none으로 하면 좋겠네요.

    #workerShop {
        display: block;
    }

    #upgradeShop {
        display: none;
    }

이제 일꾼 상점을 꾸며줍시다.
만약 일꾼 상점에 일꾼이 많다면 화면을 넘어갈 수도 있기 때문에 overflow-y: scroll을 해서 일꾼 상점이 스크롤 될 수 있도록 합시다.

    #workerShop {
        display: block;
        position: absolute;
        width: 100%;
        height: calc(100% - 120px);
        overflow-y: scroll;
    }

업그레이드 상점도 마찬가지로 꾸며줍시다.

    #upgradeShop {
        display: none;
        position: absolute;
        width: 100%;
        height: calc(100% - 120px);
        overflow-y: scroll;
    }

이제 상점 전환 버튼을 꾸며줍시다. 
저는 이 버튼의 위치가 상점의 상단에 위치하면 좋겠다고 생각했습니다.
그래서 저는 이렇게 했습니다.

    #changeShop {
        background-color: rgb(255, 255, 255);
        width: 100px;
        height: 100px;
        margin: 10px;
        text-align: center;
        font-size: 30px;
        line-height: 100px;
    }

색깔과 크기 등은 자유입니다.

일꾼 상점의 요소도 꾸며주어야겠죠?
workerShop이라는 id를 가진 div 속에 있는 workers라는 클래스를 제어해줍시다.
저는 이렇게 했습니다.

    #workerShop .workers {
        width: calc(100% - 20px);
        height: 100px;
        margin: 10px;
        background-color: rgb(255, 255, 255);
        font-size: 30px;
        line-height: 100px;
    }

저는 업그레이드 상점의 요소도 똑같이 했습니다.
똑같이 할지 다르게 할지는 자유입니다.

    #upgradeShop .upgrades {
        width: calc(100% - 20px);
        height: 100px;
        margin: 10px;
        background-color: rgb(255, 255, 255);
        font-size: 30px;
        line-height: 100px;
    }

크기나 색깔, 위치 등은 자유입니다.



[ 3. JavaScript 기능 제어하기 ]

먼저 HTML에서 사용한 addMoney라는 함수를 정의해 주어야겠네요.
addMoney라는 함수는 돈 변수를 증가시켜야 하는데,
그러면 그 전에 돈 변수를 정의해 주어야겠네요.
저는 변수 이름을 nowMoney로 했습니다.

    let nowMoney = 0;

그러면 addMoney 함수는 nowMoney를 1씩 더해주면 좋을 것 같아요.
그리고 그 더해진 상태를 nowMoney라는 id를 가진 div에 표시하면 좋을 것 같네요.
저는 이렇게 했습니다.

    function addMoney() {
        nowMoney += 1;
        document.getElementById('nowMoney').innerHTML = nowMoney;
    }

자 이제 메인 버튼을 강화할 수 있는 강화 버튼을 클릭했을 때 실행되는 함수를 정의해야겠죠?
저는 upgrade라는 이름의 함수를 정의하겠습니다.
이 함수는 메인 버튼을 다음 단계로 강화시키고 현재 버튼 상태를 기록해야하기 때문에 총 두가지의 변수가 필요할거같아요.
첫번째는 메인 버튼 도감입니다. 저는 button.js에 작성했고 HTML에서 따로 불러왔습니다.

    const buttons = [
        {
            id: "낡은",
            cost: 0
        }, {
            id: "일반",
            cost: 10
        }, {
            ...
        }
    ]

id는 버튼 이름이고 cost는 가격입니다.
id와 cost 등 모든 변수는 자유입니다.
두번째는 현재 버튼 상태입니다. 저는 nowButton이라는 이름의 변수를 만들었습니다.

    let nowButton = 0;

그렇다면 이제 upgrade 함수를 정의합시다.
먼저 현재 돈이 현재 버튼 상태의 다음 버튼의 가격(buttons[nowButton + 1].cost)보다 많으면
현재 돈에서 그 가격만큼을 빼주고 HTML에서 보여지는 버튼 상태를 변경하고 현재 돈을 HTML에 다시 띄어야겠네요.
또한 현재 버튼 상태를 하나 올려줍시다.

    if (nowMoney >= buttons[nowButton + 1].cost) {
        nowMoney -= buttons[nowButton + 1].cost;
        document.getElementById('btn').innerHTML = buttons[nowButton + 1].id;
        document.getElementById('nowMoney').innerHTML = nowMoney;
        nowButton ++;
    }

그리고 만약 돈이 충분하지 않다면 강화에 실패했다는 메세지를 띄워줍시다.
메세지 내용이나 메세지 상태창 띄우기 등은 자유입니다.

    else {
        alert('강화실패');
    }

이제 이 코드를 upgrade 함수에 넣어줍시다.

    function upgrade() {
        if (nowMoney >= buttons[nowButton + 1].cost) {
            nowMoney -= buttons[nowButton + 1].cost;
            document.getElementById('btn').innerHTML = buttons[nowButton + 1].id;
            document.getElementById('nowMoney').innerHTML = nowMoney;
            nowButton ++;
        } else {
            alert('강화실패');
        }
    }

함수 이름이나 변수 이름 등은 모두 자유입니다.

자 이제 상점을 구현해야할 것 같은데,
먼저 상점 전환 기능을 만들어봅시다.
그러려면 현재 상점이 무엇이 열려있는지를 변수로 저장하면 좋을 것 같아요.
저는 nowShop이라는 이름으로 변수를 만들었습니다.

    let nowShop = 0;

그리고 상점 전환 함수를 changeShop이라는 이름으로 만들겠습니다.
nowShop에서 0은 일꾼 상점을 말하고 1은 업그레이드 상점을 말하도록 해봅시다.
먼저 nowShop이 0일 때 함수를 실행한다면 일꾼 상점에서 업그레이드 상점으로 전환한다는 뜻이기에
일꾼 상점(workerShop)의 display를 none으로 해주고 업그레이드 상점(upgradeShop)의 display를 block으로 해줍시다.
그리고 상점 전환 버튼에 표시되는 글자도 바꿔주고 현재 상점 상태를 1로 바꿔줍시다.

    function changeShop() {
        if (nowShop == 0) {
            document.getElementById('workerShop').style.display = 'none';
            document.getElementById('upgradeShop').style.display = 'block';
            document.getElementById('changeShop').innerHTML = 'W';
            nowShop = 1;
        }
    }

반대 상황도 똑같이 만들어줍시다.

    function changeShop() {
        if (nowShop == 0) {
            document.getElementById('workerShop').style.display = 'none';
            document.getElementById('upgradeShop').style.display = 'block';
            document.getElementById('changeShop').innerHTML = 'W';
            nowShop = 1;
        } else if (nowShop == 1) {
            document.getElementById('workerShop').style.display = 'block';
            document.getElementById('upgradeShop').style.display = 'none';
            document.getElementById('changeShop').innerHTML = 'U';
            nowShop = 0;
        }
    }

상점 전환 버튼에 표시되는 글자 등은 자유입니다. 버튼을 클릭했을 때 색깔을 바꾸는 것도 가능하고 뭐 다 자유입니다.

이제 일꾼 상점에서 일꾼을 사는 함수를 만들어봅시다.
그 전에 우리가 해야할 일이 있습니다.
일꾼 도감에 따라 HTML에 있는 workerShop이라는 id를 가진 div에 일꾼들을 구매할 수 있는 버튼을 넣는 것입니다.
그러려면 일꾼 도감이 필요하겠죠?
저는 worker.js에 작성했고 HTML에서 불러왔습니다.

    const workers = [
        {
            id: '지렁이',
            cost: 10,
            cash: 1,
            count: 0
        }, {
            id: '개구리',
            cost: 20,
            cash: 2,
            count: 0
        }, {
            ...
        }
    ]

cost는 가격, cash는 일꾼이 주는 돈, count는 일꾼 개수를 말합니다.
모든 변수는 자유입니다.
이 도감에 따라 일꾼 구매 버튼을 만들어줍시다.
구매 버튼은 workers라는 클래스를 갖고 worker0~n이라는 id를 갖고 클릭했을 때 buyWorker(n)이라는 함수를 실행하도록 해봅시다.
그 div안의 내용은 workers라는 변수에 있는 id와 count가 있으면 좋을 것 같네요.
그러면 workers(일꾼 도감)에 있는 일꾼 개수만큼 반복하여 일꾼 구매 버튼을 만들어보죠.

    for (let i = 0; i < workers.length; i++) {
        document.getElementById('workerShop').innerHTML += `<div class="workers" id="worker${i}" onclick="buyWorker(${i});">${workers[i].id}<span style='float: right;'>${workers[i].count}</span></div>`
    }

이제 일꾼 구매 함수를 작성해봅시다!
먼저 n을 매개변수로 받아서 현재 돈이 workers의 n번째의 cost(가격)보다 많으면
workers의 n번째의 count(일꾼 개수)를 늘려주고 현재 돈에서 workers의 n번째의 cost를 빼줍시다.
그리고 바뀐 현재 돈을 화면에 다시 보여주고 일꾼 상점의 상태를 변경해주어야겠네요.
그러려면 방금 위에 쓴 코드를 함수화 시키고 처음에 일꾼 버튼을 모두 삭제하고 다시 최신 변수가 있는 일꾼 버튼을 추가하도록 합시다.

    function formatWorkers() {
        document.getElementById('workerShop').innerHTML = '';
        for (let i = 0; i < workers.length; i++) {
            document.getElementById('workerShop').innerHTML += `<div class="workers" id="worker${i}" onclick="buyWorker(${i});">${workers[i].id}<span style='float: right;'>${workers[i].count}</span></div>`
        }
    }

이제 이 함수를 buyWorker 함수의 마지막에 넣어주고 만약 조건에 부합하지 않는다면 구매실패라는 메시지를 띄워보죠
저는 이렇게 했습니다.

    function buyWorker(n) {
        if (nowMoney >= workers[n].cost) {
            workers[n].count ++;
            nowMoney -= workers[n].cost;
            document.getElementById('nowMoney').innerHTML = nowMoney;
            formatWorkers();
        } else {
            alert('구매실패');
        }   
    }

메시지 내용이나 표시 방법 등은 자유입니다.

이제 업그레이드 상점에서 업그레이드 구매 함수를 작성해봅시다.
업그레이드는 각 업그레이드가 하는 역할이 다르기 때문에 도감은 작성하지 않겠습니다.
이 부분 또한 자유입니다.
그래도 HTML에서 만들어 놓은 업그레이드 구매 버튼들을 만들어주어야 하기 때문에 formatUpgrade라는 함수를 만들어야겠네요.
저는 이렇게 했습니다.

    function formatUpgrade() {
        document.getElementById('upgrade0').innerHTML = `${mouses[nowMouse].id} -> ${mouses[nowMouse + 1].id}`
        document.getElementById('upgrade1').innerHTML = `${workerTime / 1000}s -> ${(workerTime - 100) / 1000}s`
        document.getElementById('upgrade2').innerHTML = `${feverTime / 10}s -> ${(feverTime - 10) / 10}s`
    }

여기서 하나 하나 설명하자면 저는 0번째 업그레이드를 메인 클릭 도구 업그레이드로 설정했습니다.
그러기 위해서는 도구 도감과 현재 도구 상태가 필요할 것 같네요.
저는 mouse.js라는 파일을 만들어서 HTML에서 불러왔습니다.

    const mouses = [
        {
            id: '낡은',
            cost: 0,
            cash: 1
        }, {
            id: '일반',
            cost: 10,
            cash: 2
        }, {
            ...
        },
    ]

id는 도구 이름이고 cost는 가격, cash는 1회 클릭 당 얻는 돈입니다.
그리고 현재 도구 상태는 nowMouse라는 이름으로 변수를 정의해줍시다.

    let nowMounse = 0;

자 다시 설명하자면 0번째 업그레이드를 mouses의 nowMouse번째의 id를 사용해서 업그레이드를 표현해준 것입니다.

1번째 업그레이드는 일꾼 시간 감소 업그레이드로 설정했습니다.
그러기 위해서는 일꾼 시간 변수와 일꾼 시간 변수를 반복 시간으로 하는 자동 돈 증가 함수가 있어야할 것 같네요.
일단 먼저 일꾼 시간 변수를 정의해주자면

    let workerTime = 1000;

으로 정의할 수 있을 것 같은데, 여기서 1000의 의미란 1000밀리세컨드 즉 1초를 의미합니다.

이제 일꾼 시간을 반복 시간으로 하는 자동 돈 증가 함수가 있어야겠죠?
저는 먼저 더미 변수인 autoCash라는 변수를 만들고 workers의 개수와 workers가 주는 돈의 곱을 autoCash에 더해주었습니다.
그리고 현재 돈에 autoCash를 더해주고 현재 돈을 다시 표시하도록 했습니다.
그리고 setInterval이라는 함수를 통해 돈을 증가시켜주는 함수와 workerTime을 사용해서 workerTime마다 함수를 반복시키도록 했습니다.
그 interval을 또 workerInterval에 저장해주었습니다.

    function autoWorker() {
        let autoCash = 0;
        for (let i = 0; i < workers.length; i++) {
            autoCash += (workers[i].count * workers[i].cash);
        }
        nowMoney += autoCash;
        document.getElementById('nowMoney').innerHTML = nowMoney;
    }

    let workerInterval = setInterval(autoWorker, workerTime);

이제 1번째의 업그레이드를 설명할 수 있겠네요.
1번째의 업그레이드를 workerTime을 밀리세컨드가 아닌 초 단위로 바꾸는 연산을 사용해서 업그레이드를 표현했습니다.
2번째의 업그레이드는 피버 시간 감소 업그레이드로 설정했습니다.
또 이 시스템을 설명하려면 피버 시간 변수와 피버 함수가 필요할 것 같네요
피버 시간 변수는 저는 이렇게 정의했습니다.

    let feverTime = 100;

100은 100밀리세컨드를 의미하므로 0.1초입니다.
어 그러면 0.1초마다 피버가 발동되는 것인가요? 라고 생각할 수도 있지만, 제가 만든 피버 시스템은 feverTime마다 100%중 1%가 차도록 만들었습니다.
자 그러면 피버 시스템 함수는 어떻게 구현했을까요?
저는 setInterval을 사용해서 feverTime마다 퍼센트 변수(let nowFeverMain = 0;으로 정의했습니다.)를 1씩 올려주고
그리고 feverMainInner이라는 id를 가진 div의 width를 nowFeverMain%만큼으로 변경했습니다.
만약 nowFeverMain이 100과 같거나 크다면 nowFeverMain을 0으로 설정해주었습니다.

    function fever() {
        nowFeverMain += 1;
        document.getElementById('feverMainInner').style.width = `${nowFeverMain}%`;
        if (nowFeverMain >= 100) {
            nowFeverMain = 0;
        }
    }

    let feverInterval = setInterval(fever, feverTime);

이번에도 interval을 변수로 지정해주었습니다.
여기서 피버 함수는 아무 역할도 하지 않습니다. 여러분이 피버가 작동했을 때 원하는 이벤트를 직접 구현해서 넣으시면 됩니다.
피버 기능을 삭제해도 좋구요!

자 그래서 2번째의 업그레이드를 feverTime을 밀리세컨드가 아닌 초 단위로 바꾸는 연산을 사용해서 업그레이드를 표현했습니다.

이제 업그레이드 구매 함수를 만들어야겠네요.
만약 0번째 업그레이드를 클릭했을 때 현재 돈이 mouses의 현재 도구의 다음 단계 번째의 가격보다 많거나 같다면
현재 돈에서 그만큼을 빼주고 현재 도구 상태를 올려줍시다.
그리고 현재 돈을 화면에 다시 표시해주고 업그레이드 구매 버튼들을 최신 상태로 바꿔주기위해 formatUpgrade라는 함수를 사용합시다.
저는 이렇게 했습니다.

    if (nowMoney >= mouses[nowMouse + 1].cost) {
        nowMoney -= mouses[nowMouse + 1].cost;
        nowMouse ++;
        document.getElementById('nowMoney').innerHTML = nowMoney;
        formatUpgrade();
    } else {
        alert('강화실패');
    }  

도구를 업그레이드하면 현재 1회 클릭당 얻는 돈이 증가해야하기 때문에 addMoney함수를 수정해야할 것 같아요.
mouses의 현재 도구번째에 cash를 가져와서 그만큼을 nowMoney에 더해주도록 했습니다.
저는 nowMoney += 1;을 이렇게 바꿔주었습니다.

    nowMoney += mouses[nowMouse].cash

자 다시 업그레이드 구매 함수로 돌아갑시다.
만약 1번째 업그레이드를 클릭했을 때 현재 돈이 업그레이드 비용(저는 그냥 10으로 했습니다. 이것 또한 자유입니다.)보다 많거나 같으면
현재 돈에서 그만큼을 빼주고 일꾼 시간을 업데이트 해주어야겠네요.
그리고 현재 돈을 화면에 다시 표시해주고 업그레이드 구매 버튼들을 최신 상태로 바꿔주기위해 formatUpgrade라는 함수를 사용합시다.
저는 이렇게 했습니다.

    if (nowMoney >= 10) {
        nowMoney -= 10;
        document.getElementById('nowMoney').innerHTML = nowMoney;
        formatUpgrade();
        updateWorkerTime(workerTime - 100);
    } else {
        alert('강화실패');
    } 

여기서 잠깐 updateWorkerTime이라는 함수는 어떻게 만들었는지 보고가야겠네요.
저는 updateWorkerTime이라는 함수에서 매개변수로 time을 받아서 workerTime을 time으로 바꿔주고
workerInterval을 삭제해줬습니다. 그리고 workerInterval을 재정의했습니다.

    function updateWorkerTime(time) {
        workerTime = time;
        clearInterval(workerInterval);
        workerInterval = setInterval(autoWorker, workerTime);
    }

만약 clearInterval을 하지 않게된다면 반복 함수가 여러개가 생깁니다.
그렇기에 기존 반복을 제거하고 새로운 반복을 만들어주는 것입니다.

자 이제 2번째 업그레이드를 클릭했을 때 현재 돈이 업그레이드 비용(저는 그냥 10으로 했습니다. 이것 또한 자유입니다.)보다 많거나 같으면
현재 돈에서 그만큼을 빼주고 피버 시간을 업데이트 해주어야겠네요.
그리고 현재 돈을 화면에 다시 표시해주고 업그레이드 구매 버튼들을 최신 상태로 바꿔주기위해 formatUpgrade라는 함수를 사용합시다.
저는 이렇게 했습니다.

    if (nowMoney >= 10) {
        nowMoney -= 10;
        document.getElementById('nowMoney').innerHTML = nowMoney;
        formatUpgrade();
        updateFeverTime(feverTime - 10);
    } else {
        alert('강화실패');
    } 

여기도 비슷하게 updateFeverTime이라는 함수를 사용했습니다.
이 함수도 비슷하게 updateFeverTime이라는 함수에서 매개변수로 time을 받아서 feverTime으로 바꿔주고
feverInterval을 삭제해줬습니다. 그리고 feverInterval을 재정의했습니다.

    function updateFeverTime(time) {
        feverTime = time;
        clearInterval(feverInterval);
        feverInterval = setInterval(fever, feverTime);
    }

자 이제 업그레이드 구매 함수를 지금까지 썼던 코드들을 모아서 정리해봅시다.
먼저 케이스를 3개로 나눕시다. 업그레이드 0번째 1번째 2번째를 클릭했을 때를 각각 나눕시다.
그러기 위해서 이 함수를 실행할 때 매개변수로 받아와야겠네요.
저는 이렇게 했습니다.

    function buyUpgrade(n) {
        if (n == 0) {
            if (nowMoney >= mouses[nowMouse + 1].cost) {
                nowMoney -= mouses[nowMouse + 1].cost;
                nowMouse ++;
                document.getElementById('nowMoney').innerHTML = nowMoney;
                formatUpgrade();
            } else {
                alert('강화실패');
            }    
        } else if (n == 1) {
            if (nowMoney >= 10) {
                nowMoney -= 10;
                document.getElementById('nowMoney').innerHTML = nowMoney;
                formatUpgrade();
                updateWorkerTime(workerTime - 100);
            } else {
                alert('강화실패');
            } 
        } else if (n == 2) {
            if (nowMoney >= 10) {
                nowMoney -= 10;
                document.getElementById('nowMoney').innerHTML = nowMoney;
                formatUpgrade();
                updateFeverTime(feverTime - 10);
            } else {
                alert('강화실패');
            } 
        }
    }



자 저의 설명서는 여기까지입니다. 정말 수고 많으셨습니다.
이런 설명서는 처음이라 어떤 난이도로 할지 몰라서... 정말 죄송합니다.
이제부터 여러분들의 디자인과 다른 특이한 요소들을 넣으셔서 만드셔도 좋습니다.
뭐든지 자유입니다! 여러분을 응원합니다!